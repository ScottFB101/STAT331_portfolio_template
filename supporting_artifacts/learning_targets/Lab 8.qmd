---
title: "Lab 8"
author: "Scott Brydon"
format: 
  html: 
    theme:
      dark: darkly
    code-fold: true
    code-block-bg: '#063970'
editor: visual
---

```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)

xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

#### Pluralize Function

```{r}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

gift <- gift %>%
  str_c("s", sep = "") |> 
  str_replace("ys$", "ies") |> 
  str_replace("o{2}", "ee") |> 
  str_replace("ses$", "se")

return(gift)

}
```

#### Phrase Function

```{r}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- case_when(
    num_word != "one" ~ pluralize_gift(item),
    ## Step 3: If the word starts with a vowel, add "an" to the beginning
    (str_detect(item, "^(a|e|i|o|u)") == TRUE) ~ str_c("an ", item),
    TRUE ~ item
  )
  ## Step 4: Glue all of the pieces together!
  num_word <- if_else(num_word == "one", "a ", num_word)
  
  phrase <- glue::glue("{num_word} {adjective} {item} {verb} {location}")
  return(str_squish(phrase))

}
```

#### Sing Day Function

```{r}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_day <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- english::ordinal(line)
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me:")
  
  # Step 2: Sing the gift phrases
    phrases <- dataset |>
      pull( {{ phrase_col }} )
    
    joined_phrases <- glue_collapse(phrases[line:1], sep = "\n", last = " and \n")
    joined_phrases <- str_c(joined_phrases, "\n")
  ## put it together
  full_line <- glue::glue("{intro} \n {joined_phrases}") 
  return(full_line)

}
```

#### Step Four:

```{r}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )

map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```
