---
title: "Lab 2"
author: "Scott Brydon"
format: 
  html: 
    self-contained: true
    theme:
      dark: darkly
    code-fold: true
    code-block-bg: '#063970'
editor: visual
---

```{r}
#| message: false
library(tidyverse)
library(here)
```

# Data Context

The Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate. To study the interactions among organisms, we experimentally manipulate access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.

We will be investigating the animal species diversity and weights found within plots at the Portal study site. The dataset is stored as a comma separated value (CSV) file. Each row holds information for a single animal, and the columns represent:

| Column          | Description                        |
|-----------------|------------------------------------|
| record_id       | Unique id for the observation      |
| month           | month of observation               |
| day             | day of observation                 |
| year            | year of observation                |
| plot_id         | ID of a particular plot            |
| species_id      | 2-letter code                      |
| sex             | sex of animal ("M", "F")           |
| hindfoot_length | length of the hindfoot in mm       |
| weight          | weight of the animal in grams      |
| genus           | genus of animal                    |
| species         | species of animal                  |
| taxon           | e.g. Rodent, Reptile, Bird, Rabbit |
| plot_type       | type of plot                       |

**1. Using the `read_csv()` function and the here** package, to write the code necessary to load in the `surveys.csv` dataset. For simplicity, name the dataset `surveys`.

```{r}
#| message: false
survey = read_csv(here("data", "surveys.csv")
         )
#Answer to #2
dim(survey)

#Answer to #3
#Reference for code https://datatofish.com/data-type-dataframe-r/
str(survey) 
```

## Inspecting the Data

**2. What are the dimensions of these data?**

The dimensions are 30463 by 15, which can be interpreted as 30463 rows/entries accompanied by 15 descriptive columns that are described in the data context section above.

**3. What are the data types of the variables in the dataset?**

Output above using the str() function.

**4. First, let's create a scatterplot of the relationship between `weight` (on the x-axis) and `hindfoot_length` (on the y-axis).**

```{r scatterplot}
ggplot(data = survey, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point()
```

**5. Let's add transparency (`alpha`) to the points, to make the points more transparent and (possibly) easier to see.**

```{r alpha}
ggplot(data = survey, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.1)
```

**6. Add some jitter to the points in the scatterplot, using `geom_jitter()`.**

```{r jitter}
ggplot(data = survey, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_jitter(alpha = 0.1)
```

**7. Facet your jittered scatterplot by `species`.**

```{r facet}
ggplot(data = survey, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_jitter(alpha = 0.1) +
  facet_wrap(~ species)
```

# Boxplots & Density Ridges

**8. Create side-by-side boxplots to visualize the distribution of weight within each species.**

```{r boxplot-jitter-points}
ggplot(data = survey, mapping = aes(x = weight, y = species)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "tomato", alpha = 0.1)
```

**9. Add another layer to your previous plot (above) that plots each observation.**

Alright, this should look less than optimal. Your points should appear rather stacked on top of each other. To make them less stacked, we need to jitter them a bit, using `geom_jitter()`.

**10. Remove the previous layer you had and include a `geom_jitter()` layer.**

That should look much better! But there is another problem! You should notice that in the code above there are **both** red points and black points. So, some of the observations are being plotted twice!

**11. Inspect the help file for `geom_boxplot()` and see how you can remove the outliers from being plotted by `geom_boxplot()`. Make this change in the code above!**

# Customization

Some small changes that make **big** differences to plots. One of these changes are better labels for a plot's axes and legend.

**10. Using the code you created in question 8, modify the x-axis and y-axis labels to describe what is being plotted. Be sure to include any necessary units!**

```{r}
ggplot(data = survey, mapping = aes(x = weight, y = species)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "tomato", alpha = 0.1) +
  labs(x = "Weight (Grams)", y = "Species of Animal")
  
```

Some people (and journals) prefer for boxplots to be stacked with a specific orientation! Let's practice changing the orientation of our boxplots.

**11. Flip the orientation of your boxplots from question 10. If you created side-by-side boxplots (stacked horizontally), your boxplots should be stacked vertically. If you had vertically stacked boxplots, you should stack your boxplots horizontally!**

```{r}
ggplot(data = survey, mapping = aes(y = weight, x = species)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "tomato", alpha = 0.1) +
  labs(y = "Weight (Grams)", x = "Species of Animal") +
  scale_x_discrete(guide = guide_axis(n.dodge=2))
```

#### Revision Notes:

#2:

In my last answer, I didn't understand that the dim function doesn't really give you much valuable information when it comes to big, complicated data sets. I was na√Øve to think that getting two unlabeled numbers would be useful to someone else who was viewing my code. Week 3 helped make it clear how unhelpful the use of dim can be with a very complicated data set. By simply just calling the data, we get an interactive table that provides dimensions, names, data types, and values for each row. This makes the dim function seem archaic now.

#11:

At first, I thought that coord_flip moved the axis labels as well, but after looking at the problem again after receiving helpful feedback, I realize that the graph doesn't make sense due to mislabeling. After looking over the data visualization readings, I realize now that I made this too complicated. Switching the labels and axis's manually by switching the x and y variables reduces the amount of code you need. I tried to be efficient by using a simple function but did the opposite in the process. I know now that you shouldn't use excess code when it isn't necessary, and that I should check my work more diligently to look for blatant mistakes.

**Second Revision Notes:**

#2:

Unfortunately, I neglected to consider that I could give my own description of the output of the dim function rather than have to rely solely on code output. This was a major lapse of judgement considering I know how valuable it is to be able to interpret and explain data outside of programming languages. Especially in any type of professional setting where your findings have implications on important business decisions etc. By using the simple output of the dim function plus some descriptive writing, I can finally answer the question without being excessive.

***Feedback Provided:***

*Careful! A professional looking report should not display messages about reading in the data or loading in package. These messages are not useful for the reader and make your document look cluttered.*

*What are the number of rows and the number of columns in the dataframe? The output of `dim()` helps, but I want you to tell me what each number means!*

*You do not need to use the `coord_flip()` function to flip the coordinates of your plot. There is a much simpler way. Can you find it?*

*You did not address the question! Look at your rendered HTML file, outputting a preview of the dataset is very messy! The purpose of these two questions is to find functions which present **only** this information in a tidy and presentable way. The `dim()` function did this, but it output two numbers. Thus, it is your responsibility to report what each of those numbers represents.*
